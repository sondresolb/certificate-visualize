SSH KEY:
eval "$(ssh-agent -s)"
ssh-add ~/.ssh/thesis_rsa

Relevant calls for certificate information:


X509 certificate object commands:
    - X509obj.digest(digest_name)

    - X509obj.get_extension_count()
    - X509obj.get_extension(index)

    - X509obj.get_issuer()

    - X509obj.get_notAfter()
    - X509obj.get_notBefore()

    - X509obj.get_serial_number()
    - X509obj.get_signature_algorithm()
    - X509obj.get_version()
    - X509obj.has_expired()

    Convert between pyopenssl and cryptography lib
    - X509obj.to_cryptography()
    - X509obj.from_cryptography()


Certificate verification:
    - class OpenSSL.crypto.X509Store
        - store is used to describe a context in which to verify a certificate

    - class OpenSSL.crypto.X509StoreContext(store, certificate)
        - store context is used to carry out the actual verification process of a certificate in a described context



CRL commands:
    - OpenSSL.crypto.load_crl(type, buffer)

SIGNATURE commands:
    - OpenSSL.crypto.verify(cert, signature, data, digest)


TODO:
    - find function for doing "hostname matching"
    - implement CRL and OCSP (using cryptography?) support using certvalidator and certifi (root CA trusted bundle)

    - process certificate extentions with cryptogrphy lib
        >>> from cryptography import x509
        >>> from cryptography.x509.oid import ExtensionOID
        >>> cert = (x509 crypto obj)
        >>> # Get the subjectAltName extension from the certificate
        >>> ext = cert.extensions.get_extension_for_oid(ExtensionOID.SUBJECT_ALTERNATIVE_NAME)
        >>> # Get the dNSName entries from the SAN extension
        >>> ext.value.get_values_for_type(x509.DNSName)
        ['www.cryptography.io', 'cryptography.io']

        - ALL cryptography.x509.oid.ExtensionOIDs:
            - https://cryptography.io/en/latest/x509/reference/#cryptography.x509.oid.ExtensionOID
        - ALL extension types
            - https://cryptography.io/en/latest/x509/reference/#cryptography.x509.ExtensionType
